A = [5 1 1; 3 4 1; 3 3 6];
b = [5; 6; 0];
x0 = [0; 0; 0];
tolerancia = 0.05;
iteracoes_maximas = 100;

% Verifica se a matriz A tem diagonal estritamente dominante por linhas
diagonal_dominante = true;
for i = 1:size(A, 1)
    soma_abs = sum(abs(A(i,:))) - abs(A(i,i));
    if abs(A(i,i)) <= soma_abs
        diagonal_dominante = false;
        break
    end
end

if diagonal_dominante
    % Separa a matriz A em D, L e U
    D = diag(diag(A));
    L = tril(A,-1);
    U = triu(A,1);

    % Verifica se D é invertível
    if det(D) == 0
        disp("A matriz D é singular e o método de Jacobi não pode ser aplicado.")
    else
        % Aplica o método de Jacobi
        iteracao = 1;
        erro_relativo = 1;
        x = x0;
        while erro_relativo > tolerancia && iteracao <= iteracoes_maximas
            x_anterior = x;
            x = inv(D) * (b - L * x - U * x);
            erro_relativo = norm(x - x_anterior) / norm(x);
            iteracao = iteracao + 1;
        endwhile

        % Exibe o resultado
        if iteracao <= iteracoes_maximas
            printf("A solução é [%.4f, %.4f, %.4f] com erro relativo %.4f na iteração %d.\n", x, erro_relativo, iteracao-1)
        else
            disp("O método não convergiu dentro do número máximo de iterações.")
        endif
    endif
else
    disp("A matriz A não é diagonal estritamente dominante por lin
